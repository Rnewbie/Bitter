library(randomForest)
args(randomForest)
?randomForest)
?randomForest
str(iris)
fit <- randomForest(Species., data = iris, importance = TRUE)
fit <- randomForest(Species~., data = iris, importance = TRUE)
str(fit)
fit$importance
fit$importance$MeanDecreaseGini
fit$importance[,5]
fit$importance[ ,5]
fit$importance[5]
str(fit$importance)
View(fit$importance)
View(fit$importance)[, 5]
importance <- fit$importance
str(importance)
importance
importance[1]
typeof(importance)
importance
ok <- data.frame(importance)
ok[, 5]
ok[ 5]
sd <- as.data.frame(fit$importanceSD)
View(sd)
fit$importance
fit$importanceSD
gini <- ok[5]
apply(gini, 1, mean)
View(C)
cor_removed <- function(x) {
x <- x[, !apply(x, 2, function(X) length(unique(x)) ==1)]
raw <- cor(x)
raw_2 <- raw[1:ncol(raw), 1:ncol(raw)]
high <- findCorrelation(raw_2, cutoff = 0.7)
remove <- x[, -high]
input <- cbind(pIC50, remove)
return(input)
}
### preparing for data set
C_P_CxP_CxC_PxP <- cor_removed(C_P_CxC_PxP_data_block_scale)
fit$importancecall
fit$importance
fit <- randomForest::randomForest(Species~., data = iris)
str(fit)
fit$importance
fit <- randomForest::randomForest(Species~., data = iris, importance = TRUE)
fit$importance
?head
importance
head(importance, 2)
setwd("~/Downloads")
setwd("~/Downloads")
geni_index <- read.csv("aromatase_RF_geni.csv", header = TRUE)
set.seed(200)
a <- cbind(descriptors = rownames(geni_index), geni_index)
a$descriptors <- factor(a$descriptors, levels = a[order(a$mean), "descriptors"])
### plot
z <- ggplot(a, aes(x = mean, y = descriptors)) +
geom_point(size = 4, colour = "black", fill = "red", pch = 21) +
geom_errorbarh(aes(xmin = mean-sd, xmax = mean+sd), colour = "black") +
ggtitle("") + xlab("Gini index") + ylab("") +
theme(
plot.margin = unit(c(1, 1, 1, 1), "cm"),
panel.border = element_rect(linetype = "solid", colour = "black", fill = NA, size = 1),
axis.title.x = element_text(size = 20, face = "bold", colour = "black"))
z + background_grid(major = "xy", minor = "none")
geni_index <- read.csv("aromatse_RF_geni.csv", header = TRUE)
set.seed(200)
a <- cbind(descriptors = rownames(geni_index), geni_index)
a$descriptors <- factor(a$descriptors, levels = a[order(a$mean), "descriptors"])
### plot
z <- ggplot(a, aes(x = mean, y = descriptors)) +
geom_point(size = 4, colour = "black", fill = "red", pch = 21) +
geom_errorbarh(aes(xmin = mean-sd, xmax = mean+sd), colour = "black") +
ggtitle("") + xlab("Gini index") + ylab("") +
theme(
plot.margin = unit(c(1, 1, 1, 1), "cm"),
panel.border = element_rect(linetype = "solid", colour = "black", fill = NA, size = 1),
axis.title.x = element_text(size = 20, face = "bold", colour = "black"))
z + background_grid(major = "xy", minor = "none")
z
geni_index <- read.csv("aromatse_RF_geni.csv", header = TRUE)
set.seed(200)
a <- cbind(descriptors = rownames(geni_index), geni_index)
a$descriptors <- factor(a$descriptors, levels = a[order(a$mean), "descriptors"])
### plot
z <- ggplot(a, aes(x = mean, y = descriptors)) +
geom_point(size = 4, colour = "black", fill = "red", pch = 21) +
geom_errorbarh(aes(xmin = mean-sd, xmax = mean+sd), colour = "black") +
ggtitle("") + xlab("Gini index") + ylab("") +
theme(
plot.margin = unit(c(1, 1, 1, 1), "cm"),
panel.border = element_rect(linetype = "solid", colour = "black", fill = NA, size = 1),
axis.title.x = element_text(size = 20, face = "bold", colour = "black"))
z + background_grid(major = "xy", minor = "none")
geni_index
a <- geni_index
a$descriptors <- factor(a$descriptors, levels = a[order(a$mean), "descriptors"])
### plot
z <- ggplot(a, aes(x = mean, y = descriptors)) +
geom_point(size = 4, colour = "black", fill = "red", pch = 21) +
geom_errorbarh(aes(xmin = mean-sd, xmax = mean+sd), colour = "black") +
ggtitle("") + xlab("Gini index") + ylab("") +
theme(
plot.margin = unit(c(1, 1, 1, 1), "cm"),
panel.border = element_rect(linetype = "solid", colour = "black", fill = NA, size = 1),
axis.title.x = element_text(size = 20, face = "bold", colour = "black"))
z + background_grid(major = "xy", minor = "none")
library(RMySQL)
library(RSQLite)
?cor
?findCorrelation
head(USArrest)
data("USArrests")
head(USArrest)
head(USArrests)
states <- rownames(USArrests)
states
substr(x = states, start = 1, stop = 4)
?abbreviate
states2 = abbreviate(states)
states2
names(states2) = NULL
states2
abbreviate(states, minlength = 5L)
state_chars = nchar(states)
state_chars
states[which(state_chars == max(state_chars))]
grep(pattern = "k", x = states, value = TRUE)
grep(pattern = "w", x = states, value  = TRUE)
grep(pattern = "[wW]", x = states, value = TRUE)
greap(pattern = "w", x = tolower(states), value = TRUE)
grep(pattern = "w", x = tolower(states), value = TRUE)
grep(pattern = "W", x = toupper(states), value = TRUE)
grep(pattern = "w", x = states, value = TRUE, ignore.case = TRUE)
hist(nchar(states), main = "Histogram",
xlab = "number of chracters in US state names")
position_a  = gregexpr(pattern = "a", text = states, ignore.case = TRUE)
position_a
num_a = sapply(position_a, function(x) ifelse(x[1] > 0, length(x), 0))
num_a
library(stringr)
str_count(states, "a")
str_count(tolower(states), "a")
str_count(tolower(states), "a")
vowels = c("a", "e", "i", "o", "u")
num_vowels = vector(mode = "integer", length = 5)
?seq_along
for (j in seq_along(vowels)) {
num_aux = str_count(tolower(states), vowels[j])
num_vowels[j] <- sum(num_aux)
}
names(num_vowels) = vowelsnum_vowels
names(num_vowels) = vowels
num_vowels
sort(num_vowels, decreasing = TRUE)
barplot(num_vowels, main = "Number of vowels in USA States names", border = NA, ylim = c(0, 80))
empty_str  = ""
empty_str
class(empty_str)
?ridge::linearRidge
install.packages("ridge")
library(ridge)
?linearRidge
empty_chr = character(0)
ampty_chr
empty_chr
class(empty_chr)
length(empty_str)
length(empty_chr)
char_vector = character(5)
char_vector
example = character(0)
example
length(example)
example[1] = "first"
example
length(example)
example
example[4] = "fourth"
example
?getFASTAFromUniProt
getFASTAFromUniProt()
getFASTAFromUniProt
setwd("/Volumes/SAW SIMEON/Bitter")
system("ls")
data <- read_excel("Natural_Bitter_Taste.xlsx")
names(data)
t2r_number <- names(data)[,3:27]
t2r_number <- names(data)[3:27]
t2r_number
?"gsub"
gsub(pattern = "*", replacement = "", t2r_number, perl = TRUE)
gsub(pattern = "*", replacement = "", t2r_number)
args(gsub)
library(stringr)
gsub(pattern = "[*]", replacement = "", t2r_number)
uniprot_id <- c("Q9NYW7", "Q9NYW6", "Q9NYW5", "Q9NYW4", "Q9NYW3", "Q9NYW2", "Q9NYW1", "Q9NYW0",
"Q9NYV9", "Q9NYV8", "Q9NYV7", "P59533", "P59534", "P59535", "P59536", "Q7RTR8",
"P59537", "P59538", "P59539", "P59540", "P59541", "P59542", "P59543", "P59544",
"P59551")
get_T2R_fasta = function(x) {
URL = paste0("http://www.uniprot.org/uniprot/", x,
".fasta")
text = RCurl::getURLAsynchronous(url = URL, perform = parallel)
return(text)
}
get_T2R_fasta(uniprot_id)
get_T2R_fasta = function(x) {
URL = paste0("http://www.uniprot.org/uniprot/",x,
".fasta")
text = RCurl::getURLAsynchronous(url = URL)
return(text)
}
get_T2R_fasta(uniprot_id)
t2r_fasta = get_T2R_fasta(uniprot_id)
library(Biostrings)
x <- AAStringSet(t2r_fasta)
writeXStringSet(x, file = "T2R.fasta", width = 80)
?writeXStringSet
?order
a = "test me"
b = 8 + 9
is.character(a)
is.character(b)
class(a)
class(b)
b = as.chracter(b)
b = as.character(b)
b
c(1:5, pi, "text")
c(1:5, TRUE, pi, "text", FALSE)
rbind(1:5, letters[1:5])
df1 = data.fraem(numbers = 1:5, letters = letters[1:5])
df1 = data.frame(numbers = 1:5, letters = letters[1:5])
df1
str(df1)
df2 = data.frame(numbers = 1:5, letters = letters[1:5], stringsAsFactors = FALSE)
df2
str(Df)
str(df2)
list(1:5, letters[1:5], rnorm(5))
abc = "http://www.abc.net.au/local/data/public/stations/abc-local-radio.csv"
radio = read.table(abc, header = TRUE, sep = ",", stringsAsFactors = FALSE)
dim(radio)
str(radio, vec.len = 1)
top105 = readLines("http://www.textfiles.com/music/ktop100.txt")
length(top105)
head(top105)
top105[11:15]
tail(top105, n = 10)
PI = paste("The lie of", pi)
PI
IloveR = paste("I", "love", "R", sep = "-")
IloveR
paste("X", 1:5, sep = ".")
paste(1:3, c("!", "?", "+"), sep = "", collapse = "")
paste(1:3, c("!", "?", "+"), spe = "")
evalue = paste("the value of 'e' is", exp(1), NA)
evalue
paste0("let's", "collapse", "all", "these", "words")
my_string = "programming with data is fun"
print(my_string)
print(my_string, quote = FALSE)
noquote(my_string)
no_quotes = noquote(c("some", "quoted", "text", "!%^(&="))
no_quotes
class(no_quotes)
is.character(no_quotes)
no_quotes[2:3]
cat(my_string)
cat(my_string, "with R")
# especifying 'sep'
cat(my_string, "with R", sep = " = ) ")
cat(my_string, "with R", sep = " =) ")
cat(1:10, sep = "-")
cat(month.name[1:4], sep = " ")
"by using the 'fill' argument", fill = 30)
cat("Loooooooong strings", "can be displayed", "in a nice format",
"by using the 'fill' argument", fill = 30)
format(13.7)
format(13.12345678)
format(13.7, nsmall =3)
format(c(6, 13.1), digits = 2)
format(c(6, 13.1), digits = 2, nsmall = 1)
format(c("A", "BB", "CCC"), width = 5, justify = "centre")
format(c("A", "BB", "CCC"), width = 5, justify = "left")
format(c("A", "BB", "CCC"), width = 5, justify = "right")
forat(c("A", "BB", "CCC"), width = 5, justify = "none")
format(c("A", "BB", "CCC"), width = 5, justify = "none")
format(1/1:5, digits = 2)
format(format(1/1:5, digits = 2), width = 6, justify = "c")
fromat(123456789, big.mark = ",")
format(123456789, big.mark = ",")
sprintf("%f", pi)
sprintf("%.3f", pi)
sprintf("%1.0f", pi)
sprint("%5.1f", pi)
sprintf("%5.1f", pi)
sprintf("%05.1f", pi)
sprintf("%+f", pi)
sprintf("% f", pi)
sprintf("%-10f", pi)
sprintf("%e", pi)
sprintf("%E", pi)
sprintf("%g", pi)
toString(17.04)
toString(c(17.04, 1978))
toString(c("Bonjour", 123, TRUE, NA, log(exp(1))))
toString(c("one", "two", "3333333"), width = 8)
toString(c("one", "two", "3333333"), width = 12)
print(1:5)
as.character(1;5)
as.character(1:5)
cat(1:5, sep = "-")
paste(1:5)
paste(1:5, collapse = "")
toString(1:5)
noquote(as.character(1:5))
nchar(c("How", "many", "characters?"))
nchar("How many characters?")
length(c("How", "many", "characters?"))
length("How many characters?")
tolower(c("aLL CharacterS in LowerR caSE", "ABCDE"))
toupper(c("All ChaRacterS in Upper Case", "abcde"))
casefold("aLL ChaRacterS in LoweR caSe")
casefold("all ChaRacterS in Upper Case", upper = TRUE)
chartr("a", "A", "This is a boring string")
chartr("ai", "X", "This is a bad example")
crazy = c("Here's to the crazy ones", "The misfits", "The rebels")
chartr("aei", "#!?", crazy)
abbreviate(names.org, minlength = 4, dot = FALSE, strict = FALSE,
method = c("left.keep", "both.sides"))
some_colors = colors()[1:4]
some_colors
colors1 = abbreviate(some_colors)
colors1
colors2 = abbreviate(some_colors, minlength = 5)
colors2
colors3 = abbreviate(some_colors, minlength = 3, method = "both.sides")
colors3
substr("abcdef", 2, 4)
x = c("may", "the", "force", "be", "with", "you")
x
substr(x, 2, 2) <- "#"
x
y = c("may", "the", "force", "be", "with", "you")
substr(y, 2, 3) <- ":)"
y
z = c("may", "the", "force", "be", "with", "you")
substr(z, 2, 3) <- c("#", "@")
z
substring("ABCDEF", 2, 4)
substr("ABCDEF", 1:6, 1:6)
substr("ABCDEF", 2, 4)
substring("ABCDEF", 1:6, 1:6)
text = c("more", "emotions", "are", "better", "than", "less")
substring(text, 1:3) <- c(" ", "zzz")
text
set1 = c("some", "random", "words", "some")
set2 = c("some", "many", "none", "few")
union(set1, set2)
set3 = c("some", "random", "few", "words")
set4 = c("some", "many", "none", "few")
intersect(set3, set4)
set5 = c("some", "random", "few", "words")
set6 = c("some", "many", "none", "few")
# difference between set5 and set6
setdiff(set5, set6)
set7 = c("some", "random", "strings")
set8 = c("some", "many", "none", "few")
set9 = c("strings", "random", "some")
setequal(set7, set8)
setequal(set7, set8)
identical(set7, set7)
identical(set7, set9)
set10 = c("sone", "stuff", "to", "play", "with")
elem1 = "play"
elem2 = "crazy"
is.element(elem1, set10)
is.element(elem2, set10)
elem1 %in% set10
elem2 %in% set10
set11 = c("today", "produced", "example", "beautiful", "a", "nicely")
sort(set11)
sort(set11, decresing = TRUE)
sort(set11, decreasing = TRUE)
set12 = c("today", "produced", "example", "beautiful", "1", "nicely")
sort(set12)
sort(set12, decreasing = TRUE)
paste(rep("x", 4), collapse = "")
library(stringr)
text = c("one", "two", "three", NA, "five")
nchar(text)
paste("University", "of", "California", "Berkeley")
paste("university", "of", "California", "Berkeley", NULL)
paste("University", "of", "California", "Berkeley", NULL, character(0), "Go Bears!")
library(stringr)
str_c("May", "The", "Force", "Be", "With", "You")
str_c("May", "The", "Force", NULL, "Be", "With", "You", character(0))
str_c("May", "The", "Force", "Be", "with", "You", sep = " _")
str_c("May", "The", "Force", "Be", "with", "You", sep = "_")
str_join("May", "The", "Force", "Be", "With", "You", sep = "-")
some_text = c("one", "two", "three", NA, "five")
nchar(some_text)
str_length(some_text)
some_factor = factor(c(1, 1, 1, 2, 2, 2), labels = c("good", "bad"))
some_factor
str_length(some_factor)
lorem = "Lorem Ipsum"
str_sub(lorem, start =1, end = 5)
substring(lorem, first = 1, last = 5)
str_sub("adois", 1:3)
resto = c("trasserie", "bistrot", "creperie", "bouchon")
str_sub(resto, start = -4, end = -1)
substring(resto, first = -4, laste = -1)
substring(resto, first = -4, last = -1)
substr(lorem, seq_len(nchar(lorem)))
str_sub(lorem, seq_len(nchar(lorem)))
substring(lorem, seq_len(nchar(lorem)))
str_sub(lorem, -seq_len(nchar(lorem)))
substring(lorem, -seq_len(nchar(lorem)))
lorem = "Lorem Ipsum"
str_sub(lorem, 1, 5) <- "Nullam"
lorem
lorem = "Lorem Ipsum"
str_sub(lorem, -1) <- "Nullam"
lorem
lorem = "Lorem Ipsm"
str_sub(lorem, c(1, 7), c(5, 8)) <- c("Nullam", "Enim")
lorem
str_dup(string, times)
str_dup("hola", 3)
str_dup("adios", 1:3)
words = c("lorem", "ipsum", "dolor", "sit", "amet")
str_dup(words,2)
str_dup(words, 1:5)
str_pad("hola", width = 7)
str_pad("adois", width = 7, side = "both")
str_pad("hashtag", width = 8, pad = "#")
str_pad("hashtag", width = 9, side = "both", pad = "-")
some_quote = c(
"I may not have gone",
"where I intended to go,",
"but I think I have ended up",
"where I needed to be")
some_quote = paste(some_quote, collapse = " ")
some_quote
cat(str_wrap(some_quote, width = 30))
cat(str_srap(some_quote, width = 30, indent = 2), "\n")
cat(str_wrap(some_quote, width = 30, indent = 2), "\n")
cat(str_srap(some_quote, width = 30, exdent = 3), "\n")
cat(str_wrap(some_quote, width = 30, exdent = 3), "\n")
bad_text = c("This", " example ", "has several ", " whitespcaes ")
str_trim(bad_text, side = "left")
str_trim(bad_text, side = "right")
str_trim(bad_text, side = "both")
change = c("Be the change", "you want to be")
word(change, 1)
word(chnage, 2)
word(change, 2)
word(change, -1)
word(change, 2, -1)
word(change, 2, -1)
money = "$money"
sub(pattern = "$", replacement = "", x = money)
sub(pattern = "\$", replacement = "", x = money)
sub(pattern = "\\$", replacement = "", x = money)
sub("\\$", "", "$Peace-Love")
sub("\\.", "", "Peace.Love")
sub("\\+", "", "Peace+Love")
sub("\\^", "", "Peace^Love")
sub("\\|", ""< "Peace|Love")
sub("\\|", "", "Peace|Love")
sub("\\}", "", "Peace{Love}")
sub("\\\\", "", "Peace\\Love")
sub("\\d", "_", "the dandelion war 2010")
gsub("\\d", "_", "the dandelion war 2012")
sub("\\D", "_", "the dandelion war 2012")
gsub("\\D", "_", "the dandelion war 2012")
sub("\\S", "_", "the dandelion war 2012")
gsub("||s", "_", "the dandelion war 2012")
gsub("\\s", "_", "the dandelion war 2012")
sub("\\S", "_", "the dandelion war 2012")
sub("\\s", "_", "the dandelion war 2012")
gsub("\\s", "_", "the dandelion war 2012")
sub("\\S", "_", "the dandelion war 2012")
gsub("\\S", "_", "the dandelion war 2012")
sub("\\b", "_", "the dandelion war 2012")
gsub("\\b", "_", "the dandelion war 2012")
sub("\\B", "_", "the dandelion war 2012")
gsub("\\B", "_", "the dandelion war 2012")
sub("\\w", "_", "the dandelion war 2012")
gsub("\\w", "_", "the dandelion war 2012)
gsub("\\w", "_", "the dandelion war 2012")
gsub("\\w", "_", "the dandelion war 2012")
sub("\\W", "_", "the dandelion war 2012")
gsub("\\W", "_", "the dandelion war 2012")
transport = c("car", "bike", "plane", "boat")
grep(pattern = "[ei]", transport, value = TRUE)
numerics = c("123", "17-April", "I-II-III", "R 3.0.1")
grep(pattern = "[01]", numerics, value = TRUE)
grep(pattern =  "[0-9]", numerics, value = TRUE)
grep(pattern = "[^0-9]", numerics, value = TRUE)
la_vie = "La vie en #FFC0CB (rose);\nCes't la vie! \ttres jolie"
print(la_vie)
# if you cant "la_vie
cat(la_vie)
print(la_vie)
